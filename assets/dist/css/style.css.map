{"version":3,"sources":["_typography.scss","_global.scss","_foundation.scss","_mixins.scss","parts/_header.scss","parts/_three-col.scss","_variables.scss"],"names":[],"mappings":"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","file":"style.css","sourcesContent":["@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800');\n\n$primary-font: 'Open Sans', sans-serif;\n\n@mixin link($px) {\n  color: $blue;\n  font-size: rem-calc($px);\n  font-weight: 400;\n\tline-height: 1.3; \n\t&:hover {\n\t\t color: $white;\n\t}\n}\n\n@mixin text($px, $color) {\n  color: $color;\n  font-size: rem-calc($px);\n  font-weight: 300;\n\tline-height: 1.3; \n}","* {\n\tbox-sizing: border-box;\n}\n\nhtml {\n\tfont-size: rem-calc(16);\n\t@include breakpoint(medium only) {\n\t\tfont-size: 90%;\n\t}\n\t@include breakpoint(small only) {\n\t\tfont-size: 80%;\n\t}\n}\n\nbody {\n\tmargin: 0; \n\tfont-family: $primary-font;\n}\n\na, button, input, textarea  {\n\tcursor: pointer;\n\ttransition:\n\tborder-color .4s ease-in,\n\tcolor .4s ease-in,\n\tbackground-color .4s ease-in;\n\t&:focus {\n\t\toutline: none; \n\t}\n}\na {\n\ttext-decoration: none;\n}\n\nh1, h2, h3, p {\n\tmargin: 0; \n}\n\nimg {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden; \n\t\n}\n\n.container {\n\tmax-width: rem-calc(1170);\n\tpadding: 0 rem-calc(15);\n\tmargin: 0 auto;\n\t@include row();\n\tjustify-content: center;\n}\n\n.content {\n\tmin-height: 100vh;\n\tbackground: url(../img/bg-01.jpg) center no-repeat;\n\tbackground-size: cover;\n\tbackground-attachment: fixed;\n}\n\n\n\n\n\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n$global-font-size: 100% !default;\n\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n//\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n\n\n\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n  // small: rem-calc(0),\n  // medium: rem-calc(640),\n  // large: rem-calc(1024),\n  // xlarge: rem-calc(1200),\n  // xxlarge: rem-calc(1440),\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - (1/16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-zf-size != null {\n    // Restore the old breakpoint size\n    $-zf-size: $old-zf-size !global;\n  } @else {\n    $-zf-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}","@mixin column() {\n\tmargin: 0 rem-calc(8);\n  width: 90%;\n  @include breakpoint(small only) {\n    max-width: rem-calc(400);\n  } \n  @include breakpoint(medium up) {\n    width: 30%;\n  }\n}\n\n@mixin row() {\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: wrap;\n}\n\n@mixin col() {\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-wrap: wrap;\n}\n",".header {\n\twidth: 100%;\n\theight: rem-calc(130); \n\tposition: relative;\n  overflow: hidden;\n\t&__fix {\n\t\twidth: 100%; \n\t\theight: rem-calc(110); \n\t\tposition: fixed;\n\t}\n\t&__row {\n\t\tposition: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: rem-calc(130);\n    z-index: 10;\n    background: url(../img/bg-01.jpg) center no-repeat;\n    background-size: cover;\n    background-attachment: fixed;\n\t}\n}",".three-col {\n  // border: 1px solid;\n  @include column(); \n  // min-height: 100vh; \n  @include breakpoint(medium up) {\n    margin-bottom: rem-calc(300); \n    \n  }\n  background: linear-gradient(to right, #444446, rgba(125, 185, 232, 0));\n  &__row {\n    width: 100%; \n    @include row();\n    justify-content: center;\n  }\n  &__wrap {\n    width: 100%;\n    height: 100%; \n    position: relative;\n  }\n  &__container {\n    padding-bottom: 30vh;\n  }\n  &__title {\n    width: 100%; \n    position: sticky;\n    top: rem-calc(130);\n    overflow: hidden;\n    z-index: 20;\n  }\n  &__link {\n    // border: 2px solid #fff;\n    padding: rem-calc(10);\n    min-height: rem-calc(118); \n    @include breakpoint(medium up) {\n      padding: rem-calc(30);\n      min-height: rem-calc(132);  \n    } \n    width: 100%;\n    @include row();\n    justify-content: center; \n    align-items: center;\n    background: linear-gradient(to right, $dark-gray, rgba(125, 185, 232, 0.5));\n    @include link(28);\n    transition: all .4s ease-out;\n    position: relative;\n    &:focus {\n      color: $white;\n    }\n    &--active {\n      color: $white;\n      &:focus {\n        color: $white;\n      }\n    }\n  }\n  &__text {\n    padding: rem-calc(10);\n    @include text(18, $white);\n    text-align: justify;\n    &--pd {\n      padding-bottom: rem-calc(150); \n    }\n  }\n  &__img {\n    &-wrap {\n      margin-bottom: rem-calc(15); \n      transition: all .4s ease-in;\n      position: relative;\n      &:hover {\n        cursor: pointer;\n      } \n    }\n    &-title {\n      padding: rem-calc(10) rem-calc(15);\n      width: 100%; \n      color: $white;\n      font-size: rem-calc(20);\n      font-weight: 400;\n      background-color: $black;\n      transition:\n      color .4s ease-in,\n      background-color .6s ease-out;\n      &:hover {\n        color: $black;\n        background-color: $white; \n      }\n      &-wrap {\n        position: absolute;\n        overflow: hidden;\n        right: 0;\n        bottom: rem-calc(5);\n        background-color: $black;\n      }\n    }\n  }\n  &__tab {\n    display: none;\n    &--active {\n      display: block;\n    }\n  }\n  &__content {\n    width: 100%; \n    @include row();\n    justify-content: center;\n  }\n  &__col {\n    min-height: 100vh; \n    @include column();\n    @include col();\n    @include breakpoint(medium up) {\n      margin-bottom: rem-calc(300); \n      &--center {\n        justify-content: flex-end;\n      }\n      &--bg {\n        background: linear-gradient(to right, #444446, rgba(125, 185, 232, 0));\n      }\n    }\n  }\n  &-nav {\n    width: 100%; \n    @include row();\n    justify-content: center;\n    position: sticky;\n    top: rem-calc(130);\n    overflow: hidden;\n    z-index: 20;\n    &__item {\n      @include column();\n      margin-bottom: rem-calc(16); \n      &--active {\n        order: 3; \n        @include breakpoint(medium up) {\n          order: inherit;\n        }\n      }\n    }\n  }\n}\n\n","$black: #000000;\n$dark-gray: #444446;\n$white: #FFF;\n$blue: #1ea5d5;\n\n\n\n"]}